{"version":3,"file":"static/js/817.3eea8ff2.chunk.js","mappings":"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","sources":["components/layouts/Error/Error.tsx","services/helpers.ts","components/layouts/Loader/Loader.tsx","components/pages/post/Comment.tsx","components/pages/post/PostInfo.tsx","components/pages/post/Comments.tsx","components/pages/post/Author.tsx","components/pages/post/Post.tsx","hooks/redux.ts"],"sourcesContent":["import React from \"react\";\nimport { isAxiosError } from \"axios\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport { isFetchBaseQueryError, isErrorWithMessage } from \"../../../services/helpers\";\n\ninterface ErrorProps {\n    error : unknown;\n}\n\nexport function Error({ error } : ErrorProps) {\n    let message = \"\"\n\n    if (isAxiosError(error)) {\n        message = error.message\n    } else if (isFetchBaseQueryError(error)) {\n        message = 'error' in error ? error.error : JSON.stringify(error.data)\n    } else if (isErrorWithMessage(error)) {\n        message = error.message\n    }\n\n    return (<Alert variant=\"danger\">\n        { message }\n    </Alert>)\n}","import { FetchBaseQueryError } from '@reduxjs/toolkit/query'\n\nexport function isFetchBaseQueryError(\n    error: unknown\n): error is FetchBaseQueryError {\n    return typeof error === 'object' && error != null && 'status' in error\n}\n\nexport function isErrorWithMessage(\n    error: unknown\n): error is { message: string } {\n    return (\n        typeof error === 'object' &&\n        error != null &&\n        'message' in error &&\n        typeof (error as any).message === 'string'\n    )\n}","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nexport function Loader() {\n    return (<div>\n        <Spinner animation=\"border\" role=\"status\" variant=\"primary\">\n            <span className=\"visually-hidden\">\n                Идёт загрузка.. Пожалуйста подождите..\n            </span>\n        </Spinner>\n    </div>)\n}","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nimport { ICommentProps } from \"../../../data/comments\";\n\nexport function Comment({ id, postId, name, email, body }:ICommentProps) {\n    return (<Card className=\"mb-3\">\n        <Card.Header as=\"h5\">{ email }</Card.Header>\n        <Card.Body>\n            <Card.Title>{ name }</Card.Title>\n            <Card.Text>\n                { body }\n            </Card.Text>\n        </Card.Body>\n    </Card>)\n}","import React from \"react\";\nimport { IPostDetailProps } from \"../../../data/posts\";\nimport { Row } from \"react-bootstrap\";\n\nexport function PostInfo({ title, body }:IPostDetailProps) {\n    return (<Row>\n        <h1>{ title }</h1>\n\n        <p>\n            { body }\n        </p>\n    </Row>)\n}","import React, { useCallback, useState } from \"react\";\nimport { Button, Row } from \"react-bootstrap\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios, { AxiosError } from \"axios\";\n\nimport { Comment } from \"./Comment\";\nimport { Loader } from \"../../layouts/Loader/Loader\";\nimport { Error } from \"../../layouts/Error/Error\";\nimport { useAppDispatch } from \"../../../hooks/redux\";\nimport { wait } from \"@testing-library/user-event/dist/utils\";\nimport { IComment } from \"../../../data/comments\";\n\n\ninterface ICommentsProps {\n    userId : string;\n}\n\nexport function Comments({ userId }:ICommentsProps) {\n    const dispatch = useAppDispatch()\n    const [ isShowComment, setIsShowComments ] = useState(false)\n    const [ isLoading, setIsLoading ] = useState(false)\n    const [ error, setError ] = useState<AxiosError>()\n    const [ comments, setComments ] = useState<IComment[]>([])\n\n    const getComments = createAsyncThunk(`posts/loadComments`, async (postId:string) => {\n        try {\n            setIsLoading(true)\n            const response = await axios.get<IComment[]>(`https://jsonplaceholder.typicode.com/posts/${postId}/comments`)\n            await wait(500)\n            setComments(response.data)\n            setIsLoading(false)\n        } catch (error) {\n            setIsLoading(false)\n            setError(error as AxiosError)\n        }\n    })\n\n    const handleShowComments = () => {\n        setIsShowComments((prev => !prev))\n\n        if (!isShowComment && comments.length === 0) {\n            dispatch(getComments(userId))\n        }\n    }\n\n    return (<>\n        <Row className=\"mt-3 justify-content-center\">\n            <Button onClick={ handleShowComments} className=\"w-auto\">\n                { isShowComment ? 'Скрыть комментарии' : 'Показать комментарии' }\n            </Button>\n        </Row>\n        { isShowComment && <Row className=\"mt-3\">\n            { isLoading && <Loader /> }\n            { error && <Error error={ error } /> }\n            { comments && comments.length > 0 && comments.map((comment) => {\n                return <Comment { ...comment } key={ comment.id } />\n            }) }\n        </Row> }\n    </>)\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Row, Image } from \"react-bootstrap\";\n\nimport { Loader } from \"../../layouts/Loader/Loader\";\nimport { Error } from \"../../layouts/Error/Error\";\nimport { useGetUserQuery } from \"../../../services/usersApi\";\n\ninterface IAuthorProps {\n    userId: number;\n}\n\nexport function Author({ userId }:IAuthorProps) {\n    const { isLoading, error, data: user } = useGetUserQuery(userId)\n\n    return (<Row className=\"mt-3 mb-5\">\n        { isLoading && <Loader /> }\n        { error && <Error error={ error } /> }\n        { user && <>\n            <Link to={ `/profile/${ user.id }` } className=\"d-flex\">\n                <Image src=\"/avatar.svg\" style={ { width : `25px` } } className=\"mx-1\" roundedCircle />\n                { user.name }\n            </Link>\n        </> }\n    </Row>)\n}","import React from \"react\";\nimport { useParams, Link, useNavigate } from \"react-router-dom\";\nimport { Button, Container, Row } from \"react-bootstrap\";\n\nimport { PostInfo } from \"./PostInfo\";\nimport { Comments } from \"./Comments\";\nimport { Loader } from \"../../layouts/Loader/Loader\";\nimport { useGetPostQuery } from \"../../../services/postsApi\";\nimport { Error } from \"../../layouts/Error/Error\";\nimport { Author } from \"./Author\";\n\nexport function Post() {\n    const { id } = useParams()\n    const navigate = useNavigate()\n    const { isLoading, error, data: post } = useGetPostQuery(String(id))\n\n    const handleBack = () => {\n        navigate(-1)\n    }\n\n    return (<Container className=\"mt-3 mb-5\">\n        <Row className=\"my-2\">\n            <Button onClick={ handleBack } className=\"w-auto\">Назад</Button>\n        </Row>\n        { isLoading && <Loader /> }\n        { error && <Error error={ error } /> }\n        { post && <>\n            <PostInfo { ...post } />\n            <Author userId={ post.userId } />\n            <Comments userId={ String(id) } />\n        </> }\n    </Container>)\n}","import { useDispatch, useSelector } from \"react-redux\"\nimport type { TypedUseSelectorHook } from \"react-redux\"\nimport type { RootState, AppDispatch } from \"../redux/store\"\n\nexport const useAppDispatch: () => AppDispatch = useDispatch\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector"],"names":["Error","_ref","error","message","isAxiosError","isFetchBaseQueryError","isErrorWithMessage","JSON","stringify","data","_jsx","Alert","variant","children","Loader","Spinner","animation","role","className","Comment","id","postId","name","email","body","_jsxs","Card","Header","as","Body","Title","Text","PostInfo","title","Row","Comments","userId","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","isShowComment","setIsShowComments","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","setError","_useState7","_useState8","comments","setComments","getComments","createAsyncThunk","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","axios","get","concat","sent","wait","t0","stop","_x","apply","arguments","_Fragment","Button","onClick","length","map","comment","_createElement","_objectSpread","key","Author","_useGetUserQuery","useGetUserQuery","user","Link","to","Image","src","style","width","roundedCircle","Post","useParams","navigate","useNavigate","_useGetPostQuery","useGetPostQuery","String","post","Container","useDispatch","useAppSelector","useSelector"],"sourceRoot":""}